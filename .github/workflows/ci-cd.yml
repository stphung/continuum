name: Continuum CI/CD

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  GODOT_VERSION: 4.4.1
  EXPORT_NAME: continuum

jobs:
  test-suite:
    name: Run Test Suite
    runs-on: ubuntu-22.04
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        if: ${{ secrets.DOCKERHUB_USERNAME != '' && secrets.DOCKERHUB_TOKEN != '' }}
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        continue-on-error: true

      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Setup Godot CI Container
        run: |
          # Try to pull the image with retry logic
          echo "Attempting to pull barichello/godot-ci:4.4.1 with authentication..."

          # First try with authentication if available, then fallback
          if ! docker pull barichello/godot-ci:4.4.1; then
            echo "First pull failed, waiting 10 seconds and retrying..."
            sleep 10
            if ! docker pull barichello/godot-ci:4.4.1; then
              echo "Second pull failed, trying alternative tag..."
              docker pull barichello/godot-ci:4.3.2 || exit 1
              # Use the fallback image for subsequent commands
              echo "GODOT_IMAGE=barichello/godot-ci:4.3.2" >> $GITHUB_ENV
            else
              echo "GODOT_IMAGE=barichello/godot-ci:4.4.1" >> $GITHUB_ENV
            fi
          else
            echo "GODOT_IMAGE=barichello/godot-ci:4.4.1" >> $GITHUB_ENV
          fi

          # Setup export templates directory on host
          mkdir -p /tmp/godot_templates

      - name: Install Dependencies via gd-plug
        run: |
          echo "Installing project dependencies including gdUnit4..."
          echo "Using Docker image: $GODOT_IMAGE"
          docker run --rm -v "$PWD:/workspace" -w /workspace $GODOT_IMAGE \
            godot --headless -s plug.gd install || true
          echo "Dependencies installed successfully"
          ls -la addons/

      - name: Import project assets
        run: |
          echo "Using Docker image: $GODOT_IMAGE"
          docker run --rm -v "$PWD:/workspace" -w /workspace $GODOT_IMAGE \
            godot --headless --import --quit-after 1 || true

      - name: Run Test Suite
        id: run-tests
        run: |
          echo "=== Running Continuum Test Suite ==="
          echo "Starting test execution with gdUnit4..."
          echo "Using Docker image: $GODOT_IMAGE"

          # Run tests and capture the exit code
          set +e
          docker run --rm -v "$PWD:/workspace" -w /workspace $GODOT_IMAGE \
            godot --headless -s addons/gdUnit4/bin/GdUnitCmdTool.gd --add test --continue --ignoreHeadlessMode 2>&1 | tee test_output.log
          TEST_EXIT_CODE=$?
          set -e

          echo "Test execution completed with exit code: $TEST_EXIT_CODE"

          # Check if tests actually passed by looking at the output
          if grep -q "0 errors.*0 failures" test_output.log || grep -q "PASSED" test_output.log; then
            echo "✅ Tests passed successfully!"
            TESTS_PASSED=true
          else
            echo "❌ Some tests failed"
            TESTS_PASSED=false
          fi

          # Check if reports directory exists and has content
          if [ -d "reports" ]; then
            echo "Test reports generated:"
            find reports -type f -name "*.html" | head -10
          fi

          # Exit codes 0 (success) and 132 (SIGILL from Godot crash on exit) are acceptable
          # when tests have actually passed
          if [ "$TEST_EXIT_CODE" -eq 0 ] || ([ "$TEST_EXIT_CODE" -eq 132 ] && [ "$TESTS_PASSED" = "true" ]); then
            echo "Test suite completed successfully (exit code: $TEST_EXIT_CODE)"
            exit 0
          else
            echo "Test suite failed (exit code: $TEST_EXIT_CODE)"
            exit 1
          fi

      - name: Upload Test Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports
          path: reports/
          if-no-files-found: ignore

  export-linux:
    name: Linux Export
    runs-on: ubuntu-22.04
    needs: [test-suite]
    container:
      image: barichello/godot-ci:4.4.1
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        continue-on-error: true

      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Setup
        run: |
          mkdir -v -p ~/.local/share/godot/export_templates/
          mv /root/.local/share/godot/export_templates/${GODOT_VERSION}.stable ~/.local/share/godot/export_templates/${GODOT_VERSION}.stable

      - name: Import project assets
        run: |
          godot --path . --headless --import --quit-after 1 || true

      - name: Linux Build
        run: |
          mkdir -v -p build/linux
          godot --headless --verbose --export-release "Desktop" build/linux/$EXPORT_NAME.x86_64

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux
          path: build/linux

  export-windows:
    name: Windows Export
    runs-on: ubuntu-22.04
    needs: [test-suite]
    container:
      image: barichello/godot-ci:4.4.1
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        continue-on-error: true

      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Setup
        run: |
          mkdir -v -p ~/.local/share/godot/export_templates/
          mv /root/.local/share/godot/export_templates/${GODOT_VERSION}.stable ~/.local/share/godot/export_templates/${GODOT_VERSION}.stable

      - name: Import project assets
        run: |
          godot --path . --headless --import --quit-after 1 || true

      - name: Windows Build
        run: |
          mkdir -v -p build/windows
          godot --headless --verbose --export-release "Windows Desktop" build/windows/$EXPORT_NAME.exe

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows
          path: build/windows

  export-web:
    name: Web Export
    runs-on: ubuntu-22.04
    needs: [test-suite]
    container:
      image: barichello/godot-ci:4.4.1
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        continue-on-error: true

      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Setup
        run: |
          mkdir -v -p ~/.local/share/godot/export_templates/
          mv /root/.local/share/godot/export_templates/${GODOT_VERSION}.stable ~/.local/share/godot/export_templates/${GODOT_VERSION}.stable

      - name: Import project assets
        run: |
          godot --path . --headless --import --quit-after 1 || true

      - name: Web Build
        run: |
          mkdir -v -p build/web
          godot --headless --verbose --export-release "Web" build/web/index.html

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: web
          path: build/web

      - name: Setup Pages
        uses: actions/configure-pages@v4
        if: github.ref == 'refs/heads/main'

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        if: github.ref == 'refs/heads/main'
        with:
          path: build/web

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        if: github.ref == 'refs/heads/main'

  export-android:
    name: Android Export
    runs-on: ubuntu-22.04
    needs: [test-suite]
    container:
      image: barichello/godot-ci:4.4.1
    env:
      GODOT_VERSION: 4.4.1
      EXPORT_NAME: continuum
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        continue-on-error: true

      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Setup
        run: |
          mkdir -v -p ~/.local/share/godot/export_templates/
          mv /root/.local/share/godot/export_templates/${GODOT_VERSION}.stable ~/.local/share/godot/export_templates/${GODOT_VERSION}.stable

      - name: Install Android Build Template
        run: |
          # Install Android build template in project (required for Godot Android export)
          mkdir -v -p android/build
          unzip -q ~/.local/share/godot/export_templates/${GODOT_VERSION}.stable/android_source.zip -d android/build

          # Create build version info to prevent "no version info for it exists" error
          echo "${GODOT_VERSION}.stable" > android/build/.build_version

          # List installed template files for debugging
          echo "Android build template installed:"
          find android/build -type f | head -20

      - name: Configure Godot Android Settings
        run: |
          # Create Godot editor settings directory
          mkdir -p ~/.config/godot

          # Configure Godot editor settings for Android
          cat > ~/.config/godot/editor_settings-4.4.tres << 'EOF'
          [gd_resource type="EditorSettings" load_steps=1 format=3]
          [resource]
          export/android/android_sdk_path = "/usr/lib/android-sdk"
          export/android/java_sdk_path = "/usr/lib/jvm/java-17-openjdk-amd64"
          export/android/force_system_user = false
          export/android/timestamping_authority_url = ""
          export/android/shutdown_adb_on_exit = true
          export/android/android_build_tools_ver = "33.0.2"
          EOF

      - name: Setup Release Keystore (if available)
        env:
          KEYSTORE_BASE64: ${{ secrets.SECRET_RELEASE_KEYSTORE_BASE64 }}
        run: |
          if [ -n "$KEYSTORE_BASE64" ]; then
            echo "Setting up release keystore..."
            echo "$KEYSTORE_BASE64" | base64 --decode > /tmp/release.keystore
            ls -la /tmp/release.keystore
          else
            echo "No release keystore configured, using debug build"
          fi

      - name: Install Project Dependencies
        run: |
          # Install addons via gd-plug before project import
          echo "Installing project dependencies via gd-plug..."
          godot --path . --headless -s plug.gd install || true
          echo "Dependencies installed successfully"
          ls -la addons/

      - name: Import project assets
        run: |
          godot --path . --headless --import --quit-after 1 || true
          cat export_presets.cfg | grep -A 5 -B 5 "custom_template"

      - name: Verify Android Environment
        run: |
          echo "=== Java SDK Information ==="
          echo "JAVA_HOME: $JAVA_HOME"
          which java
          java -version
          echo "Available Java installations:"
          find /usr/lib/jvm -type d -name "java-*" 2>/dev/null || echo "No JVM directory found"
          echo "Checking for OpenJDK 17:"
          ls -la /usr/lib/jvm/java-17-openjdk-amd64 2>/dev/null || echo "Java 17 path not found"

          echo "=== Android SDK Information ==="
          echo "ANDROID_HOME: $ANDROID_HOME"
          ls -la $ANDROID_HOME/ || echo "ANDROID_HOME directory not found"
          ls -la $ANDROID_HOME/build-tools/ || echo "build-tools directory not found"

          echo "=== Available Build Tools Versions ==="
          find $ANDROID_HOME -name "build-tools" -type d -exec ls -la {} \; || echo "No build-tools found"

          echo "=== Godot Editor Settings ==="
          cat ~/.config/godot/editor_settings-4.4.tres

      - name: Setup Debug Keystore
        run: |
          # Create debug keystore in project root (accessible as res://debug.keystore)
          echo "Setting up debug keystore for Godot Android export..."

          # Remove existing keystore if present to avoid alias conflicts
          if [ -f debug.keystore ]; then
            echo "Removing existing debug keystore..."
            rm debug.keystore
          fi

          # Generate standard Android debug keystore in project root
          keytool -genkey -v -keystore debug.keystore \
            -storepass android -alias androiddebugkey -keypass android \
            -keyalg RSA -keysize 2048 -validity 10000 \
            -dname "CN=Android Debug,O=Android,C=US"

          echo "Debug keystore created successfully:"
          ls -la debug.keystore

      - name: Android Build
        # Release build failed: "Release Username and/or Password is invalid for the given Release Keystore"
        # Reverting to debug build until keystore credentials are verified
        # env:
        #   KEYSTORE_BASE64: ${{ secrets.SECRET_RELEASE_KEYSTORE_BASE64 }}
        #   KEYSTORE_USER: ${{ secrets.SECRET_RELEASE_KEYSTORE_USER }}
        #   KEYSTORE_PASSWORD: ${{ secrets.SECRET_RELEASE_KEYSTORE_PASSWORD }}
        run: |
          mkdir -v -p build/android

          # Configure keystore settings if available (following official Godot CI pattern)
          if [ -n "$KEYSTORE_BASE64" ]; then
            echo "=== Configuring Release Build with Keystore ==="
            # Update export preset with keystore settings
            sed "s@keystore/release=\".*\"@keystore/release=\"/tmp/release.keystore\"@g" -i export_presets.cfg
            sed "s@keystore/release_user=\".*\"@keystore/release_user=\"$KEYSTORE_USER\"@g" -i export_presets.cfg
            sed "s@keystore/release_password=\".*\"@keystore/release_password=\"$KEYSTORE_PASSWORD\"@g" -i export_presets.cfg
            sed 's@package/signed=false@package/signed=true@g' -i export_presets.cfg

            EXPORT_TYPE="release"
            EXPORT_PRESET="Android"
            OUTPUT_FILE="build/android/$EXPORT_NAME.apk"
          else
            echo "=== Using Debug Build (no keystore) ==="
            EXPORT_TYPE="debug"
            EXPORT_PRESET="Android Debug"
            OUTPUT_FILE="build/android/$EXPORT_NAME-debug.apk"
          fi

          echo "=== Debug Android Export Configuration ==="
          echo "Export type: $EXPORT_TYPE"
          echo "Export preset: $EXPORT_PRESET"
          echo "Output file: $OUTPUT_FILE"

          echo "Export preset configuration:"
          if [ "$EXPORT_TYPE" = "release" ]; then
            cat export_presets.cfg | grep -A 50 "preset.4"
          else
            cat export_presets.cfg | grep -A 50 "preset.3"
          fi

          echo "=== Attempting APK Export ==="
          # Export with appropriate configuration
          if [ "$EXPORT_TYPE" = "release" ]; then
            godot --headless --verbose --export-release "$EXPORT_PRESET" "$OUTPUT_FILE"
          else
            godot --headless --verbose --export-debug "$EXPORT_PRESET" "$OUTPUT_FILE"
          fi

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: android
          path: build/android

  auto-version:
    name: Auto Version Bump
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [test-suite, export-linux, export-windows, export-web, export-android]
    permissions:
      contents: write
    outputs:
      new_tag: ${{ steps.bump.outputs.new_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for version skip
        id: check_skip
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if [[ "$COMMIT_MSG" == *"[skip-version]"* ]]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "⏭️ Skipping version bump due to [skip-version] in commit message"
          else
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "✅ Proceeding with automatic version bump"
          fi

      - name: Bump version and push tag
        id: bump
        if: steps.check_skip.outputs.skip == 'false'
        uses: anothrNick/github-tag-action@1.67.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEFAULT_BUMP: patch
          WITH_V: true
          RELEASE_BRANCHES: main
          DRY_RUN: false

  create-release:
    name: Create Release
    runs-on: ubuntu-22.04
    if: (startsWith(github.ref, 'refs/tags/v')) || (needs.auto-version.outputs.new_tag != '')
    needs: [test-suite, export-linux, export-windows, export-web, export-android, auto-version]
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Checkout the new tag if it was created by auto-version, otherwise use current ref
          ref: ${{ needs.auto-version.outputs.new_tag || github.ref }}
          fetch-tags: true
          fetch-depth: 0  # Fetch full history for changelog generation

      - name: Download Linux Build
        uses: actions/download-artifact@v4
        with:
          name: linux
          path: ./artifacts/linux

      - name: Download Windows Build
        uses: actions/download-artifact@v4
        with:
          name: windows
          path: ./artifacts/windows

      - name: Download Web Build
        uses: actions/download-artifact@v4
        with:
          name: web
          path: ./artifacts/web

      - name: Download Android Build
        uses: actions/download-artifact@v4
        with:
          name: android
          path: ./artifacts/android

      - name: Generate Changelog
        id: changelog
        run: |
          # Determine current tag - use auto-version output if available, otherwise extract from GITHUB_REF
          if [ -n "${{ needs.auto-version.outputs.new_tag }}" ]; then
            CURRENT_TAG="${{ needs.auto-version.outputs.new_tag }}"
          else
            CURRENT_TAG=${GITHUB_REF#refs/tags/}
          fi

          # Get the previous tag (sorted by version)
          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -A1 "^${CURRENT_TAG}$" | tail -1)

          # If no previous tag found, get the first tag or initial commit
          if [ -z "$PREVIOUS_TAG" ] || [ "$PREVIOUS_TAG" = "$CURRENT_TAG" ]; then
            PREVIOUS_TAG=$(git tag --sort=version:refname | head -1)
            if [ -z "$PREVIOUS_TAG" ]; then
              PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
            fi
          fi

          echo "Generating changelog from $PREVIOUS_TAG to $CURRENT_TAG"

          # Generate changelog (filter out [skip-version] commits)
          CHANGELOG=$(git log --pretty=format:"- %s" ${PREVIOUS_TAG}..${CURRENT_TAG} | grep -v '\[skip-version\]' | head -20)

          # If no changes (empty changelog), add a default message
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="- No significant changes"
          fi

          # Save to output with proper escaping
          {
            echo "changelog<<EOF"
            echo "$CHANGELOG"
            echo "EOF"
          } >> $GITHUB_OUTPUT

          echo "Previous tag: $PREVIOUS_TAG"
          echo "Current tag: $CURRENT_TAG"

          # Also save current tag for use in other steps
          echo "current_tag=$CURRENT_TAG" >> $GITHUB_OUTPUT

      - name: Create Release Archives
        run: |
          cd artifacts
          TAG="${{ steps.changelog.outputs.current_tag }}"
          zip -r ../continuum-linux-${TAG}.zip linux/
          zip -r ../continuum-windows-${TAG}.zip windows/
          zip -r ../continuum-web-${TAG}.zip web/
          zip -r ../continuum-android-${TAG}.zip android/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.changelog.outputs.current_tag }}
          files: |
            continuum-linux-*.zip
            continuum-windows-*.zip
            continuum-web-*.zip
            continuum-android-*.zip
          body: |
            ## 🎮 Continuum Release ${{ steps.changelog.outputs.current_tag }}

            **Professional vertical scrolling shmup built in Godot 4.4**

            ### 📝 What's Changed Since Last Release
            ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false